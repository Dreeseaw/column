// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package column

import (
	"testing"

	"github.com/kelindar/bitmap"
	"github.com/stretchr/testify/assert"
)

func TestOfFloat32s(t *testing.T) {
	c := makeFloat32s().(*columnFloat32)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, float32(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, float32(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, float32(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: float32(2)},
			{Kind: UpdatePut, Index: 2, Value: float32(3)},
			{Kind: UpdateAdd, Index: 1, Value: float32(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfFloat64s(t *testing.T) {
	c := makeFloat64s().(*columnFloat64)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, float64(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, float64(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, float64(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: float64(2)},
			{Kind: UpdatePut, Index: 2, Value: float64(3)},
			{Kind: UpdateAdd, Index: 1, Value: float64(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfInts(t *testing.T) {
	c := makeInts().(*columnInt)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, int(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, int(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, int(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: int(2)},
			{Kind: UpdatePut, Index: 2, Value: int(3)},
			{Kind: UpdateAdd, Index: 1, Value: int(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfInt16s(t *testing.T) {
	c := makeInt16s().(*columnInt16)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, int16(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, int16(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, int16(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: int16(2)},
			{Kind: UpdatePut, Index: 2, Value: int16(3)},
			{Kind: UpdateAdd, Index: 1, Value: int16(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfInt32s(t *testing.T) {
	c := makeInt32s().(*columnInt32)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, int32(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, int32(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, int32(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: int32(2)},
			{Kind: UpdatePut, Index: 2, Value: int32(3)},
			{Kind: UpdateAdd, Index: 1, Value: int32(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfInt64s(t *testing.T) {
	c := makeInt64s().(*columnInt64)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, int64(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, int64(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, int64(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: int64(2)},
			{Kind: UpdatePut, Index: 2, Value: int64(3)},
			{Kind: UpdateAdd, Index: 1, Value: int64(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfUints(t *testing.T) {
	c := makeUints().(*columnUint)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, uint(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, uint(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, uint(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: uint(2)},
			{Kind: UpdatePut, Index: 2, Value: uint(3)},
			{Kind: UpdateAdd, Index: 1, Value: uint(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfUint16s(t *testing.T) {
	c := makeUint16s().(*columnUint16)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, uint16(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, uint16(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, uint16(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: uint16(2)},
			{Kind: UpdatePut, Index: 2, Value: uint16(3)},
			{Kind: UpdateAdd, Index: 1, Value: uint16(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfUint32s(t *testing.T) {
	c := makeUint32s().(*columnUint32)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, uint32(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, uint32(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, uint32(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: uint32(2)},
			{Kind: UpdatePut, Index: 2, Value: uint32(3)},
			{Kind: UpdateAdd, Index: 1, Value: uint32(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}

func TestOfUint64s(t *testing.T) {
	c := makeUint64s().(*columnUint64)
	c.Grow(99)
	assert.Equal(t, 100, len(c.data))

	{ // Set the value at index
		c.Update([]Update{{UpdatePut, 9, uint64(99)}})
		assert.True(t, c.Contains(9))
		assert.Equal(t, 1, c.Index().Count())
	}

	{ // Get the values
		v, ok := c.Value(9)
		assert.Equal(t, uint64(99), v)
		assert.True(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(99), f)
		assert.True(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(99), i)
		assert.True(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(99), u)
		assert.True(t, ok)
	}

	{ // Remove the value
		c.Delete(&bitmap.Bitmap{0b1000000000})
		v, ok := c.Value(9)
		assert.Equal(t, uint64(0), v)
		assert.False(t, ok)

		f, ok := c.Float64(9)
		assert.Equal(t, float64(0), f)
		assert.False(t, ok)

		i, ok := c.Int64(9)
		assert.Equal(t, int64(0), i)
		assert.False(t, ok)

		u, ok := c.Uint64(9)
		assert.Equal(t, uint64(0), u)
		assert.False(t, ok)
	}

	{ // Update several items at once
		c.Update([]Update{
			{Kind: UpdatePut, Index: 1, Value: uint64(2)},
			{Kind: UpdatePut, Index: 2, Value: uint64(3)},
			{Kind: UpdateAdd, Index: 1, Value: uint64(2)},
		})
		assert.True(t, c.Contains(1))
		assert.True(t, c.Contains(2))
		v, _ := c.Int64(1)
		assert.Equal(t, int64(4), v)
	}

}
